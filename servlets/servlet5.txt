Servlet life cycle methods
===========================
We have three life cycle methods in servlets.

1) public void init(ServletConfig config)throws ServletException
-----------------------------------------
	It is used for instantiation event.
	This method will execute just before servlet object creation.

2) public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
-----------------------------------------
	It is used for request arrival event.
	This method will execute when request goes to servlet program.

3) public void destroy() 
-------------------------
	It is used for destruction event.
	This method will execute just before servlet object destruction.

Diagram: servlet5.1

Servlet Filters
================
Filter is an object which is executed at the time of preprocessing and postprocessing of the request.

Diagram: servlet5.2

Filter is used to perform filtering task.

The main objective of filter are.

1) To count number of request coming to the application.

2) To perform validation

3) Encryption and Decryption 

and etc.

Like Servlets, Filter also contains it's own Filter API

A javax.servlet class defined following three interfaces.

1)Filter Interface
================
For creating any filter, we must and should implements the Filter interface.

Filter interface provides the following 3 life cycle methods for filter.


i)public void init(FilterConfig config)
----------------------------------
	
	IT is used to initialize the filter.
	It invokes only once .


ii)public void doFilter(HttpServletRequest req,HttpServletResponse res,FilterChain chain)
----------------------------------------------------------
	This method is invoked every time when user request to any resources to which
	the filter is mappend.

	IT is used to perform filtering task.	
	
iii)public void destroy()
---------------------------
	This method is invoked only once when filter is taken out of the service.


2)FilterChain
==============
It is responsible to invoke the next filter or resource in the chain.

FilterChain contains only one method.

i)public void doFilter(HttpServletRequest req,HttpServletResponse res)
------------------------------------
	It passes the control to the next filter or resource.

	
3)FilterConfig
===============
For every filter our servlet container creates FilterConfig object.
It is one per filter.



Deployment Directory Structure
-------------------------------
FilterApp
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|		
			|---MyFilter.java
			|---MyServlet.java 
|---WebContent
	|
	|---index.html
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.

index.html
-----------
<center>
	<h1> 
		<a href="test"> click Me </a>
	</h1>
</center>


web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
 
 <servlet>
 	<servlet-name>MyServlet</servlet-name>
 	<servlet-class>com.ihub.www.MyServlet</servlet-class>
 </servlet>
 <servlet-mapping>
 	<servlet-name>MyServlet</servlet-name>
 	<url-pattern>/test</url-pattern>
 </servlet-mapping>
 
 <filter>
 	<filter-name>MyFilter</filter-name>
 	<filter-class>com.ihub.www.MyFilter</filter-class>
 </filter>
 <filter-mapping>
 	<filter-name>MyFilter</filter-name>
 	<url-pattern>/test</url-pattern>
 </filter-mapping>
 
 
 <welcome-file-list>
 	<welcome-file>index.html</welcome-file>
 </welcome-file-list>
 
</web-app>

MyFilter.java
--------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class MyFilter implements Filter
{

	public void init(FilterConfig config)throws ServletException
	{
		
	}
	
	
	@Override
	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
			throws IOException, ServletException 
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>Filter invoked Before</h1></center>");
		chain.doFilter(req, res);
		pw.println("<center><h1>Filter invoked after</h1></center>");
		
	}
	
	public void destroy()
	{
		
	}

}

MyServlet.java
--------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class MyServlet extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1> Servlet is executed </h1></center>");
		
	}
}

Request url
---------
	http://localhost:2525/FilterApp/
	


ServletConfig object
======================
ServletConfig is an interface which is present in javax.servlet package.

ServletConfig object is used to read configuration information from web.xml file.

ServletConfig object is created by web container for every servlet.

We can create ServletConfig object as follow.

ex:
	ServletConfig config=getServletConfig();

ServletConfig object contains following methods.

1)public String getInitParameter(String name);
-------------------------------------
	It will return parameter value based on specified parameter name.

2)public Enumeration getInitParameterNames();
-----------------------------------------------------
	It will return enumeration of all initialized parameter names.

3)public ServletContext getServletContext();
-------------------------------------------------------
	It will return ServletContext object.

4)public String getServletName();
-----------------------------------------------	
	It will return Servlet name.



Deployment Directory Structure
-------------------------------
ConfigApp
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|		
			|---TestSrv.java

|---WebContent
	|
	|---index.html
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.

























