Servlet to Servlet communication
================================
Servlet to servlet communication is also known as servlet chaining.

Servlet to servlet communication is possible in three ways.

1) Forwarding the request 

2) Including the response 

3) Send Redirection 


1) Forwarding the request 
--------------------------
In forwarding the request output of source servlet program will be discarded and output of destination program goes to browser window as dynamic response.

To forward the request we need to use RequestDispatcher object.

RequestDispatcher is an interface which is present in javax.servlet package.

We can create RequestDispatcher object as follow.

ex:
	RequestDispatcher rd=req.getRequestDispatcher();
	rd.forward(req,res);


2) Including the response 
-------------------------
In including the response output of source servlet program and destination JSP program combinely goes to browser window as dynamic response.

To include the response we need to use RequestDispatcher object.

RequestDispatcher is an interface which is present in javax.servlet package.

We can create RequestDispatcher object as follow.

ex:
	RequestDispatcher rd=req.getRequestDispatcher();
	rd.include(req,res);

Deployment Directory Structure 
------------------------------
STSApp1
|
|---Java Resources
|	|
	|------src
		|
		|---com.ihub.www		
			|
			|---TestSrv1.java
			|---TestSrv2.java 
|---Webcontent 
	|
	|---form.html
	| 
	|---WEB-INF
		|
		|---web.xml 
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.

form.html
----------

<form action="test1">
	<table align="center">
			
		<tr>
			<td>UserName:</td>
			<td><input type="text" name="t1"/></td>
		</tr>
		<tr>
			<td>Password:</td>
			<td><input type="password" name="t2"/></td>
		</tr>
		<tr>
			<td><input type="reset" value="reset"/></td>
			<td><input type="submit" value="submit"/></td>
		</tr>
			
	</table>

</form>

web.xml
------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>TestSrv1</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv1</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>TestSrv1</servlet-name>
  	<url-pattern>/test1</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>TestSrv2</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv2</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>TestSrv2</servlet-name>
  	<url-pattern>/test2</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

TestSrv1.java
--------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv1 extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data 
		String name = req.getParameter("t1");
		String pass = req.getParameter("t2");
		
		if(pass.equals("admin"))
		{
			RequestDispatcher rd=req.getRequestDispatcher("/test2");
			rd.forward(req, res);
		}
		else
		{
			pw.println("<center><b style='color:red'>Incorrect username or password</b></center>");
			RequestDispatcher rd=req.getRequestDispatcher("form.html");
			rd.include(req, res);
		}
		
		pw.close();
		
	}
}

TestSrv2.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv2 extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>Login successfully..</h1></center>");
		
		pw.close();
	}
}

Request url
---------
	http://localhost:2525/STSApp1/

3) Send Redirection 
====================
It is used to forward the request to the application which is present in same server or different server.

To perform send redirection we need to use sendRedirect() method of HttpServletResponse object.
ex:
	res.sendRedirect("url");

It is used to redirect the response to other resources. It can be HTML, JSP , Servlets and etc.

It always sends a new request.

It uses browser window to send the request.


Deployment Directory Structure 
--------------------------------
STSApp2 
|
|---Java Resources
|	|
	|-------src
		|
		|---com.ihub.www
			|
			|---TestSrv.java
|---Webcontent 
	|
	|---index.html 
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.
		
index.html
------------

<center>
	<h1>
			<a href="test?t1=flights"> Flights </a>
	</h1>
	<h1>
			<a href="test?t1=hotels"> Hotels </a>
	</h1>
	<h1>
			<a href="test?t1=railways"> Trains </a>
	</h1>
</center>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
 	
</web-app>

TestSrv.java
--------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException 
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading the data from the request
		String value = req.getParameter("t1");
		
		res.sendRedirect("http://www.makemytrip.com/"+value);
		
		pw.close();
	}
}

Request url
---------
	http://localhost:2525/STSApp2/




Q) How to enable <load-on-startup> and what happens if we enable <load-on-startup> ?

We can enable <load-on-startup> inside web.xml file.

web.xml
-------
<web-app>
	<servlet>
  		<servlet-name>TestSrv</servlet-name>
  		<servlet-class>com.ihub.www.TestSrv</servlet-class>
		<load-on-startup>1</load-on-startup>
  	</servlet>
  	<servlet-mapping>
  		<servlet-name>TestSrv</servlet-name>
		<url-pattern>/test</url-pattern>
  	</servlet-mapping>
</web-app>

If we use <load-on-startup> then our servlet container will create servlet object during the server startup or during the deployment of web application.

In general, servlet container will create servlet object before we give the request.
















