Q) What is servlet?

Servlet is a dynamic web resource program which enhance the functionality of web server, proxy server or IDE's server.

or 

Servlet is a java based dynamic web resource program which is used to develop dynamic web pages.

or

Servlet is a single instance multithread java base web resource program which is used to use create web applications.

Diagram: servlet2.1



Servlet API
============
API is a collection of packages.
ex:
	javax.servlet.*
	javax.servlet.http.*


First web application development having servlet program as web resource program
=================================================================================
Diagram: servlet2.2

Deployment Directory Structure 
------------------------------
DateApp
|
|---Java Resources
|	|
	|------src
		|
		|---com.ihub.www
			|
			|---DateSrv.java
|---WebContent
	|
	|-----WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.


step1:
-----
	Launch eclipse IDE by chossing workspace location.

step2:
------
	Create a dynamic web project i.e DateApp.

step3:
-----
	Add "servlet-api.jar" file in project build path.
	
step4:
-----
	Create a com.ihub.www package inside "src" folder.

step5:
-----	
	Create a DateSrv.java file inside "com.ihub.www" package.

DateSrv.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;

import javax.servlet.GenericServlet;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class DateSrv extends GenericServlet 
{
	public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		Date d=new Date();
		pw.println("<center><h1>Current Date and Time : <br> "+d+"</h1></center>");
		
		pw.close();
	}
}


step6:
------
	Configure servlet program in web.xml file.

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>DateSrv</servlet-name>
  	<servlet-class>com.ihub.www.DateSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>DateSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>

</web-app>

step7:
-----
	Add the tomcat server to eclipse IDE.

step8:
-----
	Run the dynamic web project on tomcat server.

step9:
-----
	Test the web application by using below request url.
	ex:
		http://localhost:2525/DateApp/test

Note:
-----
If there is a problem with web.xml file then we will get 404 Error.
If there is a problem with servlet file then we will get 500 Error.


Types of URL Patterns
======================
Every servlet program recognize with the help of url pattern.

Web server, Client and other web resource programs recognize each servlet program by using url pattern.

URL pattern will hide class name or technology name from the outsider for security reason.

We have three types url patterns.

1) Exact match url pattern

2) Directory match url pattern

3) Extension match url pattern 

Every server is designed to support these three url patterns.


1) Exact match url pattern
------------------------
It starts with '/' slash having some name.
ex:
	web.xml
	-------
	<url-pattern>/test</url-pattern>

	request url
	------------
	http://localhost:2525/DateApp/test 	//valid
	http://localhost:2525/DateApp/best	//invalid 	 
	http://localhost:2525/DateApp/x/test	//invalid 


2) Directory match url pattern
--------------------------
It starts with '/' symbol and ends with '*' symbol.
ex:
	web.xml 
	-------
	<url-pattern>/x/y/*</url-pattern>

	Request url
	-----------
	http://localhost:2525/DateApp/x/y/z  		//valid
	http://localhost:2525/DateApp/x/y/z/test 	//valid 
	http://localhost:2525/DateApp/y/x/z		//invalid 


3) Extension match url pattern 
-------------------------------
It starts with '*' symbol having an extension.

ex:
	web.xml
	------
	<url-pattern>*.do</url-pattern>

	Request url
	-----------
	http://localhost:2525/DateApp/test.do	//valid 
	http://localhost:2525/DateApp/x/y/z.do	//valid 
	http://localhost:2525/DateApp/test	//invalid 
	











 

















