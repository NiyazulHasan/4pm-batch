Note:
=====
Servlet programs are executed by the servlet container.

JSP programs are not execute by the JSP container directly. Because JSP container takes the support of Servlet container for execution. 

Hence for every JSP program one JES class will be created.

JES stands for Java Equivalent Servlet.



JSP life cycle methods 
======================
We have three JSP life cycle methods.

1) _jspInit() 
--------------
	It is used for intantitation event.
	This method will execute just before JES class object creation.

2) _jspService()
---------------
	It is used for request arrival event.
	This method will execute when request goes to JSP page.

3) _jspDestroy() 
----------------
	It is used for destruction event.
	This method will execute just before JES class object destruction.



Phases in JSP
==============
We have two phases in JSP.

1) Translation phase 

2) Request Processing phase 

1) Translation phase 
---------------------
In translation phase , our JSP program converts to JES class.

2) Request Processing phase 
---------------------------
In Request processing phase, our JES class will be executed and result sends to browser window as dynamic response.

Diagram: jsp2.1


Q) How to enable <load-on-startup> and what happens if we enable <load-on-startup> ?

We can enable <load-on-startup> inside web.xml file.

web.xml
-------
	<web-app>

		<servlet>
			<servlet-name>ABC</servlet-name>
			<jsp-file>/ABC.jsp</jsp-file>
			<load-on-startup>1</load-on-startup>
		</servlet>
		<servlet-mapping>
			<servlet-name>ABC</servlet-name>
			<url-pattern>/test</url-pattern>
		</servlet-mapping>

	</web-app>

If we enable <load-on-startup> then our container performs Translation phase during the server startup or during the deployment of web application.

In general, our container will create JES class object before we give the request.



JSP Tags/Elements
===================
JSP contains mainly three tags.

1) Scripting tags 
------------------
	It is divided into three tags.
	
	1) Scriptlet tag 
		ex:	
			<%  code here %> 

	2) Expression tag 
		ex:
			<%=  code here %>

	3) Declaration tag 	
		ex:
			<%!  code here %>

2) Directive tags 
--------------------
	It is divided into two tags.
	
	1) page directive tag 
		ex:
			<%@page  attribute=value %>
		

	2) include directive tag
		ex:
			<%@include attribute=value %>

3) Action tags 
--------------
	We have following list of action tags.
	ex:
		<jsp:include>
		<jsp:forward>
		<jsp:useBean>
		<jsp:setProperty>
		<jsp:getProperty>
		and etc.

Commnents in JSP
----------------
	<%--  comment here --%>


Scriptlet tag 
=================
Scriptlet tag is used to declare java code.

syntax:	
	<%  code here %> 


Deployment Directory Structure 
------------------------------
JspApp2
|
|---Java Resources
|
|---Webcontent 
	|
	|---form.html
	|---process.jsp 
	|
	|---WEB-INF
		|
		|---web.xml 

Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.


form.html
----------

<form action="process.jsp">

	Name: <input type="text" name="t1"/> 
	
	<input type="submit" value="submit"/>

</form>



web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>


process.jsp
----------
<center>
<h1>
	
	<%
			String name = request.getParameter("t1");
	
			out.println("Welcome :"+name);
	%>

</h1>
</center>

request url
-----------
	http://localhost:2525/JspApp2/


Expression tag 
===============
The code which is written in expression tag will return the output stream of a response.So we don't need to use out.println() to print the data.

syntax:
------
	<%=  code here %>

Note:
	Expression tag does not support semicolon.


Deployment Directory Structure 
------------------------------
JspApp2
|
|---Java Resources
|
|---Webcontent 
	|
	|---form.html
	|---process.jsp 
	|
	|---WEB-INF
		|
		|---web.xml 

Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.


form.html
----------

<form action="process.jsp">

	Name: <input type="text" name="t1"/> 
	
	<input type="submit" value="submit"/>

</form>



web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>


process.jsp
----------
<center>
<h1>
	
	<%
			String name = request.getParameter("t1");

	%>
	<%=   "Hey! Welcome : "+name %>
</h1>
</center>



request url
-----------
	http://localhost:2525/JspApp2/





Declaration tag 
==================
It is used to declare the fields and methods.	

syntax:
-------
		<%!  code here %>
	 

Deployment Directory Structure 
------------------------------
JspApp3
|
|---Java Resources
|
|---Webcontent 
	|
	|---index.jsp 
	|
	|---WEB-INF
		|
		|---web.xml 

Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.


index.jsp
----------

<%! 
	int i=100;

	int cube(int n)
	{
		return n*n*n;
	}
%>

<center>
<h1>
		<%= "The value is ="+i %>
		<br>
		<%= "Cube of a given number is = "+cube(5) %>	
</h1>
</center>


web.xml
------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  
</web-app>


Request url
---------
	http://localhost:2525/JspApp3/















