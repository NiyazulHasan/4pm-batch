application object
====================
It is an implicit object of type ServletContext.

It is created by the web container.

It is used to read configuration information from web.xml file which is global.

Deployment Directory Structure 
------------------------------
JspApp13
|
|---Java Resources
|	
|---Webcontent 
	|
	|---index.html
	|---process.jsp
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

index.html
---------
<center>
	<h1>
		<a href="test"> click me </a>
	</h1>
</center>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
 
 <servlet>
 	<servlet-name>ABC</servlet-name>
 	<jsp-file>/process.jsp</jsp-file>
 </servlet>
 <servlet-mapping>
 	<servlet-name>ABC</servlet-name>
 	<url-pattern>/test</url-pattern>
 </servlet-mapping>
 
 <context-param>
 	<param-name>driver</param-name>
 	<param-value>oracle.jdbc.driver.OracleDriver</param-value>
 </context-param>
 
</web-app>

process.jsp
-----------

<%
	String value = application.getInitParameter("driver");

	out.println(value);
%>

Request url
----------
	http://localhost:2525/JspApp13/



session object
===============
It is an implicit object of type HttpSession.

It is created by the web container.

It is used to add, read  and remove the attributes from Session.


Deployment Directory Structure 
------------------------------
JspApp14
|
|---Java Resources
|
|---Webcontent
	|
	|---form.html
	|---first.jsp 
	|---second.jsp 
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.
	

form.html
----------

<form action="first.jsp">

	Name: <input type="text" name="t1"/>
	
	<input type="submit" value="submit"/>
	
</form>


web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

first.jsp
---------

<%
	//reading form data 
	String name = request.getParameter("t1");

	session.setAttribute("pname", name);
	
	out.println("Welcome :"+name);
%>
<center>
	<a href="second.jsp"> click Here for second jsp</a>
</center>

second.jsp
-----------

<%
	String name =(String)session.getAttribute("pname");
	
	out.println("Hey !"+name);
%>

Request url
----------
	http://localhost:2525/JspApp14/


pageContext object
===================
It is an implicit object of type pageContext.

It is created by the web container.

It is used to add, read and remove attributes from session along with following scopes.

JSP contains four scopes.

1) page scope (default)

2) request scope 

3) session scope 

4) application scope 

Deployment Directory Structure 
------------------------------
JspApp14
|
|---Java Resources
|
|---Webcontent
	|
	|---form.html
	|---first.jsp 
	|---second.jsp 
	|
	|---WEB-INF
		|
		|---web.xml 
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.
	

form.html
----------

<form action="first.jsp">

	Name: <input type="text" name="t1"/>
	
	<input type="submit" value="submit"/>
	
</form>


web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

first.jsp
---------

<%
	//reading form data 
	String name = request.getParameter("t1");

	pageContext.setAttribute("pname", name,pageContext.SESSION_SCOPE);
	
	out.println("Welcome :"+name);
%>
<center>
	<a href="second.jsp"> click Here for second jsp</a>
</center>

second.jsp
-----------

<%
	String name =(String)pageContext.getAttribute("pname",pageContext.SESSION_SCOPE);
	
	out.println("Hey !"+name);
%>

Request url
----------
	http://localhost:2525/JspApp14/


Junit 
=======
Junit is a unit testing framework.

Unit testing means testing a small piece of code working as per our requirement or not.

It is widely used unit testing framework.

The latest version of Junit is Junit 5.

To perform unit testing we need to create test cases or test suit.

It is very important as per TDD (Test Driven Development).


Advantages of Junit 
-------------------
1) Find the bugs early 

2) Easy to fix the bugs

3) Reduce the cost and time




ex:
----

Simple Maven Archetype project structure
-------------------------------------
DemoProject
|
|----src/main/java
	|
	|---com.ihub.www
		|
		|---Demo.java
|
|----src/main/resources
|
|----src/test/java
	|
	|---com.ihub.www
		|
		|---DemoTest.java
|
|----src/test/resources



Steps to perform unit testing
=============================
step1:
------
	Create a simple maven archetype project.

step2:
-------
	create a com.ihub.www package inside "src/main/java".

step3:
------
	Create a App.java file inside "com.ihub.www" package.

Demo.java
---------
package com.ihub.www;

public class Demo 
{
	public int sum(int a,int b)
	{
		return a+b;
	}
	
	public String concatinate(String str1,String str2)
	{
		return str1+str2;
	}
}


step4:
-----
	Create a Test file i.e DemoTest.java.
	ex:
		right click to App.java file --> new --> others -->
		Junit --> test case --> Next --> select the methods for 
		test cases --> finish.


step5:
-----
	Add unit testing logic inside DemoTest.java file.

AppTest.java
------------
package com.ihub.www;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class DemoTest {

	Demo d=null;
	
	@Before
	public void setUp() throws Exception {
		d=new Demo();
	}

	@After
	public void tearDown() throws Exception {
		
		
	}

	@Test
	public void testSum() {
		int result=d.sum(10,20);
		assertEquals(50, result);
	}

	@Test
	public void testConcatinate() {
		String result=d.concatinate("ihub", "talent");
		assertEquals("ihubtalent",result);
	}

}


step6:
-----
	Run the junit test cases.
	ex:
		Right click to AppTest.java file --> run as --> Junit test case.

Note:
-----
	Green color indicates unit test case is passed.
	Brown color indicates unit test case is failed.


Steps to convert Dynamic web project to war file and deploy in server.
======================================================================

step1:
-----
	Make sure dynamic web project is ready.

step2:
------
	Convert dynamic web project to war file.
	ex:
		Right click to project --> Export --> War file --> select destination folder
		--> save --> finish.

















































