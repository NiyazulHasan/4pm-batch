3) Logical operators
=====================

Logical AND operator (&&)
--------------------------
Logical AND operator deals with boolean values either true or false.

Truth table
-----------
T	T	= T
T	F	= F 
F	T	= F 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(true && true); // true
		System.out.println(true && false); // false
		System.out.println(false && true );// false
		System.out.println(false && false); // false
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>2) && (6<10);
		
		System.out.println(b); // true 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b = (5>20) && (6<10);
		
		System.out.println(b); // false
	}
}


Logical OR operator (||) 
------------------------
Logical OR operator deals with boolean values either true or false.

Truth table
------------
T	T	= T
T	F	= T
F	T	= T 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(true || true);//true
		System.out.println(true || false);//true
		System.out.println(false || true);//true
		System.out.println(false || false);//false
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b= (5>20) || (6<1);
		
		System.out.println(b); // false 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b= (5>2) || (6<1);
		
		System.out.println(b); // true
	}
}

Logical NOT operator (!)
--------------------
Logical NOT operators deals with boolean values either true or false.

ex:
--
class Test  
{
	public static void main(String[] args) 
	{
		boolean b= !(5>2);
		
		System.out.println(b); // false
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b= !(5>20);
		
		System.out.println(b); // true
	}
}

How to convert decimal to binary number
---------------------------------------
	10   - decimal number 
	1010 - binary number 

	2|10
         ---- 0
	2|5
	 ---- 1
	2|2
	 ---- 0 	^
	  1 		|
	-----------------
	1010


How to convert binary to decimal number
--------------------------------------
	1010 - binary number 
	10   - decimal number 

	1010
	    <--

	0*1 +  1*2 + 0*4 +  1*8 	

	 0 + 2 + 0 + 8 = 10



4) Bitwise operators
======================


Bitwise AND operator (&)
--------------------------
Bitwise AND operator deals with binary numbers.

ex:
--
class Test  
{
	public static void main(String[] args) 
	{
		int a = 10, b = 15;
		
		int c = a & b;
		
		System.out.println(c); // 10
	}
}
/*
	10 - 1010
    15 - 1111
	---------
	&  - 1010
*/

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a = 10, b = 5;
		
		int c = a & b;
		
		System.out.println(c); // 0
	}
}
/*
	10 - 1010
    5  - 0101
	---------
	&  - 0000
*/

Bitwise OR operator (|)
------------------------
Bitwise OR operator deals with binary numbers.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a = 10, b = 5;
		
		int c = a | b;
		
		System.out.println(c); // 15
	}
}
/*
	10 - 1010
	5  - 0101
	---------
	|  - 1111
*/


Bitwise XOR operator (^)
------------------------
Bitwise XOR operator details with binary numbers.

Truth table
-----------
T	T	= F
T	F	= T
F	T	= T 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a = 10, b = 15;
		
		int c = a ^ b;
		
		System.out.println(c); // 5
	}
}
/*
	10 - 1010
	15 - 1111
	---------
	^  - 0101
*/


Bitwise NOT operator
--------------------
class Test  
{
	public static void main(String[] args) 
	{
		int i=~10;
		
		System.out.println(i); // -11 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=~67;
		
		System.out.println(i); // -68
	}
}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=~(-8);
		
		System.out.println(i); // 7
	}
}

5) Arithmetic operators 
=======================
% - modules 
/ - division 
* - multiplication
+ - addition 
- - subtraction 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=5+7/2+9*4+6%3+9-20;
		
		System.out.println(i); // 33
	}
}

/*
	5 + 7/2 + 9*4 + 6%3 + 9 - 20
	
	5 + 3  + 36 + 0  + 9 - 20
	
	53 - 20 
	
	33

*/

6) Relational operators
========================

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 > 20 ); // false 
		
		System.out.println(10 >= 20 ); // false 
		
		System.out.println(10 < 20 ); // true 
		
		System.out.println(10 <= 10 ); // false 
		
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 == 10); // true 
		
		System.out.println(10 == 20); // false 
		
		System.out.println(10 != 10); // false
		
		System.out.println(10 != 20); // true 
		
		
	}
}

7) Shift operators
==================

Right shift operator (>>)
-------------------------
10 >> 1 = 10/2 

10 >> 2 = 10/4

10 >> 3 = 10/8

10 >> 4 = 10/16 

and etc. 

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int i= 10 >> 2; // 10 / 2*2 
		
		System.out.println(i); //2 
		
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= 100 >> 4;  //100/2*2*2*2
		
		System.out.println(i); //6 
		
	}
}

Left shift operator (<<)
-------------------------
10 << 1 = 10*2 

10 << 2 = 10*4

10 << 3 = 10*8

10 << 4 = 10*16 

and etc.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= 10 << 2;  // 10*(2*2)
		
		System.out.println(i); //40 
		
	}
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i= 100 << 4;  // 10*(2*2*2*2)
		
		System.out.println(i); //1600
		
	}
}

8) Unary operator 
=================

Increment/Decrement operator (++/--)
-------------------------------------
We have two types of increment operator.

1) Pre increment 
------------------
ex:
	++i

2) Post increment 
-----------------
ex:
	i++


We have two types of decrement operator.

1) Pre decrement 
------------------
ex:
	--i

2) Post decrement 
-----------------
ex:
	i--


POST Increment/Decrement operator
----------------------------------
Rule1: First Take 
Rule2 : Then Change 


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i++;
		
		System.out.println(i); // 11
		
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		System.out.println(i++); // 10
		
	}
}















































