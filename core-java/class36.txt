Multithreading
===============
Q) What is the difference between Thread and Process?

Thread
------
	It is a light weight sub process.
	We can run multiple threads concurently.
	One thread can communicate with another thread.	
	ex:
		A class is one thread 
		A block is one thread 
		A constructor is one thread

Process
--------
	It is a collection of threads.
	We can run multiple process concurently.
	One process can't communicate with another process. 
	ex:
		Downloading a file from internet is one process.
		Typing the notes in editor is one process.
		Taking a class using zoom meeting is one process.


Q) What is multitasking?

Executing several task simultenously such concept is called multitasking.

We have two types of multitasking.

1) Process based multitasking

2) Thread based multitasking

1) Process based multitasking
-------------------------------
Executing several task simultenously where each task is a independent process.
It is best suitable for OS level.

2) Thread based multitasking
-----------------------------
Executing several task simultenously where each task is a same part of a program.
It is best suitable for programmatic level.


Q) What is Multithreading?

Executing several threads simultenously such concept is called multithreading.

In multithreading only 10% of work should be done by a programmer and 90% of work will be done by JAVA API.

The main important application area of multithreading are.

1) To implements multimedia graphics.

2) To develop video games.

3) To develop animations.

Ways to start a thread in java
============================
There are two ways to start a thread in java.

1) By extending Thread class

2) By implementing Runnable interface



1) By extending Thread class
-----------------------------
class MyThread extends Thread
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread
		MyThread t=new MyThread();
		
		//start a thread 
		t.start();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

Thread Schedular
=================
If multiple threads are waiting for execution which thread has to be execute will decided by thread schedular.

What algorithm, behaviour, mechanism used by thread schedular is depends upon JVM vendor.

Hence we can't expect any execution order or exact output in multithreading.



Life cycle of a thread
======================
Diagram : class36.1

Once if we create thread object, our thread will be in new or born state.

Once if we call t.start() method , our thread goes to ready or runnable state.

If thread schedular allocates to CPU then our thread enters to running state.

Once the run() method execution is completed then our thread goes to dead state.


2) By implementing Runnable interface
--------------------------------------
class MyRunnable implements Runnable 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		MyRunnable r = new MyRunnable();
		Thread t=new Thread(r); // r is a targatable interface
		t.start();
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}


Setting and getting name of a thread
=====================================
In java, every thread has a name explicitly provided by the programmer or automatically generated by JVM.

We have following methods to set and get name of a thread.

ex:
	public final void setName(String name);
	public final String getName();

ex:

class MyThread extends Thread 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getName());// main 
		
		MyThread t=new MyThread();
		System.out.println(t.getName());//Thread-0
		
		Thread.currentThread().setName("Parent-Thread");
		System.out.println(Thread.currentThread().getName());// Parent-Thread
		
		t.setName("Child-Thread");
		System.out.println(t.getName()); // Child-Thread
	}
}


Thread priority
=================
Every thread has a priority explicitly provided by the programmer or automatically generated by JVM.

The valid range of thread priority is 1 to 10. Where 1 is a least priority and 10 is a highest priority.

If we take more then 10 priority then we will get IllegalArgumentException.

Thread class defines following constants as thread priorites.
ex:
	Thread.MAX_PRIORITY   -- 10 
	Thread.NORM_PRIORITY  -- 5 
	Thread.MIN_PRIORITY   -- 1 

We don't have such priorities like LOW_PRIORITY and HIGH_PRIORITY.

A thread schedular uses thread priority while allocating to CPU.

A thread which is having highest priority will execute first.

If multiple threads having same priority then we can't expect any execution order.

We have following methods to set and get thread priority.

ex:
	public final void setPriority(int priority)
	public final int getPriority() 

ex:

class MyThread extends Thread 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getPriority());// 5
		
		MyThread t = new MyThread();
		System.out.println(t.getPriority());//5
		
		Thread.currentThread().setPriority(9);
		System.out.println(Thread.currentThread().getPriority());//9
		
		System.out.println(t.getPriority());//5
		
		t.setPriority(4);
		System.out.println(t.getPriority());//4
		
		t.setPriority(11); // R.E IllegalArgumentException
	}
}









































































