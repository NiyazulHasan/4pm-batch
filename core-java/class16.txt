Right Side loop patterns
========================
1)

      1
    2 2 
  3 3 3 
4 4 4 4

ex:

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			
			//right side elements
			for(int j=1;j<=i;j++)
			{
				System.out.print(i+" ");
			}
			
			//new line
			System.out.println();
		}
	}
}

2) 
4 4 4 4
  3 3 3 
    2 2 
      1

ex:

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=4;i>=1;i--)
		{
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			
			//right side elements
			for(int j=1;j<=i;j++)
			{
				System.out.print(i+" ");
			}
			
			//new line
			System.out.println();
		}
	}
}


3)
      *
    * * 
  * * * 
* * * *
  * * * 
    * * 
      *  

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			
			//right side elements
			for(int j=1;j<=i;j++)
			{
				System.out.print("* ");
			}
			
			//new line
			System.out.println();
		}
		//descending 
		//rows
		for(int i=3;i>=1;i--)
		{
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			
			//right side elements
			for(int j=1;j<=i;j++)
			{
				System.out.print("* ");
			}
			
			//new line
			System.out.println();
		}
	}
}

Pyramid loop patterns
======================
1)

      1
    1 2 1 
  1 2 3 2 1 
1 2 3 4 3 2 1 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=1;i<=4;i++)
		{
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			
			//left side 
			for(int j=1;j<=i;j++)
			{
				System.out.print(j+" ");
			}
			
			//right side
			for(int j=i-1;j>=1;j--)
			{
				System.out.print(j+" ");
			}
			
			//new line
			System.out.println();
		}
	}
}

2)
1 2 3 4 3 2 1
  1 2 3 2 1 
    1 2 1 
      1 
ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=4;i>=1;i--)
		{
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print("  ");
			}
			
			//left side 
			for(int j=1;j<=i;j++)
			{
				System.out.print(j+" ");
			}
			
			//right side
			for(int j=i-1;j>=1;j--)
			{
				System.out.print(j+" ");
			}
			
			//new line
			System.out.println();
		}
	}
}


Q) Write a java program to display pascal triangle triangle?


	1
       1 1
      1 2 1 
     1 3 3 1 
    1 4 6 4 1 	


ex:

class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=0;i<5;i++)
		{
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print(" ");
			}
			
			int number=1;
			for(int k=0;k<=i;k++)
			{
				System.out.print(number+" ");
				
				number = number * (i-k)/(k+1);
			}
			
			//new line
			System.out.println();
		}
	}
}

Q) Write a java program to display below loop pattern?


	* 
       * * 
      * * * 
     * * * *
    * * * * * 

ex:
class Test  
{
	public static void main(String[] args) 
	{
		//rows
		for(int i=0;i<5;i++)
		{
			//space
			for(int j=4;j>i;j--)
			{
				System.out.print(" ");
			}
		
			for(int k=0;k<=i;k++)
			{
				System.out.print("* ");
			}
			
			//new line
			System.out.println();
		}
	}
}

Q) Write a java program to display below loop pattern?

1             1
1 2         2 1 
1 2 3     3 2 1
1 2 3 4 4 3 2 1

ex:

class Test  
{
	public static void main(String[] args) 
	{
		int rows=4;
		
		//rows
		for(int i=1;i<=rows;i++)
		{
			//left side
			for(int j=1;j<=i;j++)
			{
				System.out.print(j+" ");
			}
			
			//space 
			for(int j=1;j<=(rows-i)*2;j++)
			{
				System.out.print("  ");
			}
			
			//right side 
			for(int j=i;j>=1;j--)
			{
				System.out.print(j+" ");
			}
			
			//new line
			System.out.println();
		}
	}
}

4) Jump Statement
=================
Jump statement is used to jump from one section of code to another section.

We have two jump statements.

1) break stmt

2) continue stmt 

1) break stmt
--------------
A break statement is used to break the execution of loops.

For conditional statements we can use if condition.

syntax:
	 break;

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		
		break;
		
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E :break outside switch or loop

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		
		if(true)
		{
			break;
		}
		
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E :break outside switch or loop


ex:
---
class Test 
{
	public static void main(String[] args) 
	{	
		for(int i=1;i<=10;i++)
		{
			if(i==5)
			{
				break;
			}
			
			System.out.print(i+" "); //1 2 3 4 
		}
	}
}

2) continue stmt
---------------
It is used to continue the execution of loops.

For conditional statement we can use if condition.

syntax:
	continue;

ex:
---
class Test 
{
	public static void main(String[] args) 
	{	
		System.out.println("stmt1");
		
		continue;
		
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E :  continue outside of loop

ex:2
---
class Test 
{
	public static void main(String[] args) 
	{	
		System.out.println("stmt1");
		
		if(true)
		{
			continue;
		}
		System.out.println("stmt2");
	}
}
o/p:
	C.T.E :  continue outside of loop

ex:
---
class Test 
{
	public static void main(String[] args) 
	{	
		for(int i=1;i<=10;i++)
		{
			if(i==5)
			{
				continue;
			}
			
			System.out.print(i+" "); //1 2 3 4 6 7 8 9 10
		}
	}
}

Assignment
==========
Q) Write a java program to display reverse of a given number?

input:
	123

output:
	ThreeTwoOne

ex:
---
import java.util.Scanner;
class Test 
{
	public static void main(String[] args) 
	{	
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number :");
		int n=sc.nextInt();//123
		
		while(n>0)
		{
			switch(n%10)
			{
				case 0 : System.out.print("Zero");break;
				case 1 : System.out.print("One");break;
				case 2 : System.out.print("Two");break;
				case 3 : System.out.print("Three");break;
				case 4 : System.out.print("Four");break;
				case 5 : System.out.print("Five");break;
				case 6 : System.out.print("Six");break;
				case 7 : System.out.print("Seven");break;
				case 8 : System.out.print("Eight");break;
				case 9 : System.out.print("Nine");break;
			}
			n=n/10;
		}
		
	}
}












































































