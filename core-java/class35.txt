TreeMap 
=======
The underlying data structure is RED BLACK TREE.

Duplicate keys are not allowed but values can be duplicate.

Insertion order is not preserved because it takes sorting order of key.

If we depend upon default natural sorting order then keys must be homogeneous and Comparable.

If we depen upon customized natural sorting order then keys can be hetrogenous and non-comparable.

Key can't be null but value can be null.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
		tm.put(5,"five");
		tm.put(10,"ten");
		tm.put(1,"one");
		System.out.println(tm);//{1=one, 5=five, 10=ten}
		
		tm.put(1,"gogo");
		System.out.println(tm);//{1=gogo, 5=five, 10=ten}
		
		tm.put(6,null);
		System.out.println(tm);//{1=gogo, 5=five, 6=null, 10=ten}
		
		tm.put(null,"six");
		System.out.println(tm);//R.E NullPointerException
	}
}

Hashtable 
=========
The underlying data structure is Hashtable.

Duplicate keys are not allowed but values can be duplicate.

Insertion order is not preserved because it takes descending order of key.

Hetrogeneous objects are allowed for both key and value.

Null insertion is not possible for both key and value.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Hashtable ht=new Hashtable();
		ht.put(4,"four");
		ht.put(1,"one");
		ht.put(10,"ten");
		ht.put(8,"eight");
		System.out.println(ht);//{10=ten, 8=eight, 4=four, 1=one}
		
		ht.put(1,"gogo");
		System.out.println(ht);//{10=ten, 8=eight, 4=four, 1=gogo}
		
		ht.put("six",6);
		System.out.println(ht);//{10=ten, 8=eight, six=6, 4=four, 1=gogo}
		
		//ht.put(null,"seven");
		//System.out.println(ht); // R.E NullPointerException
		
		ht.put(7,null);
		System.out.println(ht); // R.E NullPointerException
	}
}

Interview Programs
===================
Q) Write a java program to count number of occurance of a given string?

input:
	this is is java java class

output:
	this=1 is=2 java=2 class=1 

ex:
--
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="this is is java java class";
		
		String[] sarr=str.split(" ");
		
		Map<String,Integer> map=new LinkedHashMap<String,Integer>();
		
		for(String s:sarr)
		{
			if(map.get(s)!=null)
			{
				map.put(s,map.get(s)+1);
			}
			else
			{
				map.put(s,1);
			}
		}
		
		for(Map.Entry<String,Integer> entry: map.entrySet())
		{
			System.out.print(entry.getKey()+"="+entry.getValue()+" ");
		}
		
	}
}


Q) Write a java program to count number of occurance of characters in a given string?

input:
	java

output:
	j=1 a=2 v=1


import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="java";
		
		char[] carr=str.toCharArray();		

		Map<Character,Integer> map=new LinkedHashMap<Character,Integer>();
		
		for(char c:carr)
		{
			if(map.get(c)!=null)
			{
				map.put(c,map.get(c)+1);
			}
			else
			{
				map.put(c,1);
			}
		}
		
		for(Map.Entry<Character,Integer> entry: map.entrySet())
		{
			System.out.print(entry.getKey()+"="+entry.getValue()+" ");
		}
		
	}
}

Q) Write a java program to display the given string in a sorting order?

Input:
	dog apple bat cat 

output:
	apple bat cat dog 

ex:

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="dog apple bat cat";
		
		String[] sarr=str.split(" ");
		
		List<String> list=new ArrayList<String>();
		
		for(String s:sarr)
		{
			list.add(s);
		}
		
		Collections.sort(list);
		
		for(String s:list)
		{
			System.out.print(s+" ");
		}
	}
}

Types of cursors in java
========================
Cursor is used to retrieve the objects one by one from Collections.

We have three types of cursors.

1) Enumeration 

2) Iterator 

3) ListIterator 

1) Enumeration 
--------------
Enumeration is used to read the objects one by one from legacy Collection objects.

We can create Enumeration object as follow.

ex:
	Enumeration e=v.elements();

Enumeration interface contains following two methods.
ex:
	public boolean hasMoreElements();
	public Object nextElement();

ex:
--
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector v=new Vector();
		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		
		Enumeration e=v.elements();
		while(e.hasMoreElements())
		{
			Integer i= (Integer) e.nextElement();
			System.out.println(i);
		}
	}
}

2) Iterator
-------------
Iterator is used to read the objects one by one from any Collection object.Hence it is a universal cursor.

Using Iterator we can perform read and remove operation.

We can create Iterator object as follow.
ex:
	Iterator itr=al.iterator();

Iterator interface contains following three methods.
ex:
	public boolean hasNext();
	public Object next();
	public void remove();

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		for(int i=1;i<=10;i++)
		{
			al.add(i);
		}
		
		Iterator itr=al.iterator();
		while(itr.hasNext())
		{
			Integer i=(Integer)itr.next();
			if(i%2==0)
				itr.remove();
		}
		
		System.out.println(al);//[1,3,5,7,9]
	}
}

3) ListIterator 
------------------
It is a child interface of Iterator interface.

ListIterator is used to read objects one by one from List Collection objects.

Using ListIterator we can perform read, remove ,adding and replacement of new objects.

We can create ListIterator object as follow.

ex:
	ListIterator litr=al.listIterator();

ListIterator interface contains following 9 methods.
ex:
	public boolean hasNext()
	public Object next()
	public boolean hasPrevious()
	public Object previous()
	public void remove()
	public int nextIndex()
	public int previousIndex()
	public void set(Object o)
	public void add(Object o)

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("chiru");
		al.add("venki");
		System.out.println();//[bala,nag,chiru,venki]
		
		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			System.out.println(s);
		}
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("chiru");
		al.add("venki");
		System.out.println(al);//[bala,nag,chiru,venki]
		
		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("nag"))
			{
				litr.remove();
			}
		}
		System.out.println(al);//[bala,chiru,venki]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("chiru");
		al.add("venki");
		System.out.println(al);//[bala,nag,chiru,venki]
		
		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("nag"))
			{
				litr.add("pavan");
			}
		}
		System.out.println(al);//[bala,nag,pavan,chiru,venki]
	}
}

ex:
--
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("chiru");
		al.add("venki");
		System.out.println(al);//[bala,nag,chiru,venki]
		
		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("nag"))
			{
				litr.set("pavan");
			}
		}
		System.out.println(al);//[bala,pavan,chiru,venki]
	}
}

Diagram : class35.1
































































































