Set
=====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single unit where duplicates are not allowed and order is not preserved then we need to use Set interface.

Diagram: class34.1


HashSet
========
The underlying data structure is Hashtable.

Duplicate objects are not allowed.

Insertion order is not preserved because it takes hashcode of an object.

Hetrogeneous objects are allowed.

Null insertion is possible.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashSet hs=new HashSet();
		hs.add("five");
		hs.add("two");
		hs.add("four");
		hs.add("one");
		System.out.println(hs);//[four, one, five, two]
		
		hs.add("one");
		System.out.println(hs);//[four, one, five, two]
		
		hs.add(10);
		System.out.println(hs);//[four, one, 10, five, two]
		
		hs.add(null);
		System.out.println(hs);//[null, four, one, 10, five, two]
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashSet<String> hs=new HashSet<String>();
		hs.add("five");
		hs.add("two");
		hs.add("four");
		hs.add("one");
		System.out.println(hs);//[four, one, five, two]
		
		hs.add("one");
		System.out.println(hs);//[four, one, five, two]
		
		hs.add(null);
		System.out.println(hs);//[null, four, one, five, two]
		
	}
}

LinkedHashSet
==============
It is a child class of HashSet class.

LinkedHashSet is exactly same as HashSet class with following differences.

HashSet						LinkedHashSet
------------					----------------
The underlying data structure is Hashtable.	They underlying data structure is Hashtable and 
						LinkedList.

Insertion order is not preserved.		Insertion order is preserved.

It is introduced in 1.2 version.		It is introduced in 1.4 version.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedHashSet lhs=new LinkedHashSet();
		lhs.add("five");
		lhs.add("two");
		lhs.add("four");
		lhs.add("one");
		System.out.println(lhs);//[five,two,four,one]
		
		lhs.add("one");
		System.out.println(lhs);//[five,two,four,one]
		
		lhs.add(10);
		System.out.println(lhs);//[five,two,four,one,10]
		
		lhs.add(null);
		System.out.println(lhs);//[five,two,four,one,10,null]
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedHashSet<String> lhs=new LinkedHashSet<String>();
		lhs.add("five");
		lhs.add("two");
		lhs.add("four");
		lhs.add("one");
		System.out.println(lhs);//[five,two,four,one]
		
		lhs.add("one");
		System.out.println(lhs);//[five,two,four,one]
		
		lhs.add(null);
		System.out.println(lhs);//[five,two,four,one,null]
		
	}
}

TreeSet
========
The underlying data structure is Balanced Tree.

Duplicate objects are not allowed.

Insertion order is not preserved because it takes sorting order of hash code.

Hetrogeneous objects are not allowed.

If we try to insert hetrogeneous objects then we will get ClassCastException.

Null insertion is not possible. If we try to insert null then we will NullPointerException.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet ts=new TreeSet();
		ts.add(6);
		ts.add(1);
		ts.add(10);
		ts.add(3);
		System.out.println(ts);//[1,3,6,10]
		
		ts.add(1);
		System.out.println(ts);//[1,3,6,10]
		
		//ts.add("Hi");
		//System.out.println(ts);// R.E ClassCastException
		
		//ts.add(null);
		//System.out.println(ts); // R.E NullPointerException
	}
}

Interview Questions
==================

Q) Write a java program to compare two dates?

import java.time.LocalDate;
class Test  
{
	public static void main(String[] args) 
	{
		LocalDate date1=LocalDate.now();
		LocalDate date2=LocalDate.of(2024,9,15);
		
		if(date1.compareTo(date2)>0)
			System.out.println("date1 is greatest");
		else if(date1.compareTo(date2)<0)
			System.out.println("date2 is greatest");
		else
			System.out.println("Both are same");
	}
}


Q) Write a java program to display distinct elements from given array?

Input:
	1 2 2 3 3 3 4 4 4 4 

Output:
	1 2 3 4 

ex:

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={1,2,2,3,3,3,4,4,4,4};
		
		Set<Integer> set=new LinkedHashSet<Integer>();
		
		for(int i:arr)
		{
			set.add(i);
		}
		
		for(int i:set)
		{
			System.out.print(i+" ");
		}
	}
}

Map
====
It is not a child interface of Collection interface.

If we want to represent group of individual objects in a key and value pair then we need to use Map interface.

Key can't duplicate but value can be duplicate.

Key and value both must be objects.

Each key and value pair is called one-entry.

Diagram: class34.2


HashMap
========
The underlying data structure is Hashtable.

Duplicate keys are not allowed but values can be duplicate.

Insertion order is not preserved because it takes hashcode of the key.

Hetrogeneous objects are allowed for both key and value.

Null insertion is possible for key and value.

ex:
--
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashMap hm=new HashMap();
		hm.put(1,"one");
		hm.put(10,"ten");
		hm.put(4,"four");
		hm.put(6,"six");
		hm.put(9,"nine");
		System.out.println(hm);//{1=one, 4=four, 6=six, 9=nine, 10=ten}
		
		hm.put(1,"gogo");
		System.out.println(hm);//{1=gogo, 4=four, 6=six, 9=nine, 10=ten}
		
		hm.put("hi",8);
		System.out.println(hm);//{1=gogo, hi=8, 4=four, 6=six, 9=nine, 10=ten}
		
		hm.put(null,null);
		System.out.println(hm);//{null=null, 1=gogo, hi=8, 4=four, 6=six, 9=nine, 10=ten}
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashMap<Integer,String> hm=new HashMap<Integer,String>();
		hm.put(1,"one");
		hm.put(10,"ten");
		hm.put(4,"four");
		hm.put(6,"six");
		hm.put(9,"nine");
		System.out.println(hm);//{1=one, 4=four, 6=six, 9=nine, 10=ten}
		
		hm.put(1,"gogo");
		System.out.println(hm);//{1=gogo, 4=four, 6=six, 9=nine, 10=ten}
		
		
		hm.put(null,null);
		System.out.println(hm);//{null=null, 1=gogo, hi=8, 4=four, 6=six, 9=nine, 10=ten}
	}
}


LinkedHashMap
==============
It is a child class of HashMap class.

LinkedHashMap is exactly same as HashMap with following differences.


HashMap						LinkedHashMap
---------					--------------
The underlying data structure is Hashtable.	They underlying data structure is Hashtable and 
						LinkedList.

Insertion order is not preserved.		Insertion order is preserved.

It is introduced in 1.2 version.		It is introduced in 1.4 version.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedHashMap lhm=new LinkedHashMap();
		lhm.put(1,"one");
		lhm.put(10,"ten");
		lhm.put(4,"four");
		lhm.put(6,"six");
		lhm.put(9,"nine");
		System.out.println(lhm);//{1=one, 10=ten, 4=four, 6=six, 9=nine}
		
		lhm.put(1,"gogo");
		System.out.println(lhm);//{1=gogo, 10=ten, 4=four, 6=six, 9=nine}
		
		lhm.put("hi",8);
		System.out.println(lhm);//{1=gogo, 10=ten, 4=four, 6=six, 9=nine, hi=8}
		
		lhm.put(null,null);
		System.out.println(lhm);//{1=gogo, 10=ten, 4=four, 6=six, 9=nine, hi=8, null=null}
	}
}


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedHashMap lhm=new LinkedHashMap();
		lhm.put(1,"one");
		lhm.put(10,"ten");
		lhm.put(4,"four");
		lhm.put(6,"six");
		lhm.put(9,"nine");
		
		Set s= lhm.keySet();
		System.out.println(s); //[1, 10, 4, 6, 9]
		
		Collection c=lhm.values();
		System.out.println(c);//[one, ten, four, six, nine]
		
		Set s1=lhm.entrySet();
		System.out.println(s1);//[1=one, 10=ten, 4=four, 6=six, 9=nine]
	}
}












































