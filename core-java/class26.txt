singleton example
-------------------
class Singleton
{
	static Singleton single=null;

	private Singleton()
	{
	}

	public static Singleton getInstance()
	{
		if(single==null)
		{
			single=new Singleton();
		}

		return single;
	}
}
class Test
{
	public static void main(String[] args)
	{
		Singleton s1=Singleton.getInstance();
		System.out.println(s1.hashCode());

		Singleton s2=Singleton.getInstance();
		System.out.println(s2.hashCode());
	}
}

Enum
=====
Enum is a group of named constants.

Enum concept introduced in 1.5v.

Using enum we can create our own datatype called enumerated datatype.

When compare to old language enum, java enum is more powerful.

We can declare enum as follow.

syntax:
-------
	enum   type_name
	{
		value1,value2,..,valueN		
	}	

ex:
	enum  Months
	{
		JAN,FEB,MAR	
	}

Internal implementation of enum
--------------------------------
Every enum internally implemented as class concept and extends java.lang.Enum class.

Every enum constant is a reference variable if enum type.

ex:


enum Months			final class Months extends java.lang.Enum 
{				{
	JAN,FEB,MAR ==> 		public static final Months JAN=new Months();
}					public static final Months FEB=new Months();
					public static final Months MAR=new Months();
				}

Declaration and Usage of enum
------------------------------
enum Months
{
	JAN,FEB,MAR
}
class Test
{
	public static void main(String[] args)
	{
		Months m=Months.JAN;
		System.out.println(m); 
	}
}

ex:
--
enum Months
{
	JAN,FEB,MAR
}
class Test
{
	public static void main(String[] args)
	{
		Months m=Months.FEB;
		
		switch(m)
		{
			case JAN: System.out.println("January"); break;
			case FEB: System.out.println("February"); break;
			case MAR: System.out.println("March");break;
		}
	}
}


java.lang.Enum 
---------------
The power to enum will in inherited from java.lang.Enum class.

It contains following two methods.

1) values()
---------
	It returns group of constants from enum.

2) ordinal() 
-----------
	It returns ordinal number.

ex:
---
enum Months
{
	JAN,FEB,MAR
}
class Test
{
	public static void main(String[] args)
	{
		Months[] m=Months.values();

		for(Months m1: m)
		{
			System.out.println(m1+"----------"+m1.ordinal());
		}
	}
}

When compare to old language enum, java enum is more powerful because in addition to 
constants we can declare constructors, variables and methods.

ex:
---
enum Drinks
{
	PEPSI,COKE,CAMPA;

	Drinks()
	{
		System.out.println("constructor");
	}
}
class Test
{
	public static void main(String[] args)
	{
		Drinks d=Drinks.PEPSI;
	}
} 

ex:
---
enum Week
{
	MON,TUE,WED,THU,FRI,SAT,SUN;

	static int i=10;

	public static void main(String[] args)
	{
		System.out.println(i);	
	}
}


Wrapper classes
===============
The main objective of wrapper classes are.

1) To wrap primitive to wrapper object and vice versa.

2) To defined several utility methods.

ex:
	primitive type		wrapper class
	---------------		--------------
	byte			Byte
	short			Short
	int			Integer
	long			Long
	float			Float
	double			Double 
	boolean			Boolean
	char 			Character 

constructor
-----------
There are two ways to create object for wrapper classes.One will take corresponding 
primitive as an argument and another will take corresponding String as an argument.

ex:
	wrapper class		constructor
	------------		----------
	Byte			byte or String 
	Short			short or String
	Integer			int or  String
	Long			long or String 
	Float			float or String
	Double 			double or String 
	Boolean			boolean or String
	Character 		char 

ex:
--
class Test 
{
	public static void main(String[] args)
	{
		Integer i1=new Integer(10);
		System.out.println(i1);//10

		Integer i2=new Integer("20");
		System.out.println(i2);//20
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Boolean b1=new Boolean(true);
		System.out.println(b1);//true

		Boolean b2=new Boolean("false");
		System.out.println(b2);//false
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Character c=new Character('a');
		System.out.println(c); //a
	}
}

Utility methods
================

1) valueOf() method
-------------------
It is used to convert primitive type to wrapper object.

ex:
--
class Test 
{
	public static void main(String[] args)
	{
		byte b=10;

		Integer i=Integer.valueOf(b);

		System.out.println(i);
	}
}


2) xxxValue() method
---------------
It is used to convert wrapper object to primitive type.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Integer i=new Integer(10);

		byte b=i.byteValue();

		System.out.println(b);
	}
}

3) toString() method
-------------------
It is used to convert wrapper object to String type.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Integer i=new Integer(10);

		String str=i.toString();

		System.out.println(str);
	}
}

4) parseXxx() method
---------------
It is used to convert string type to primitive type.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		String str="45";

		int i=Integer.parseInt(str);
		System.out.println(i); //45

		float f=Float.parseFloat(str);
		System.out.println(f); //45.0
	}
}

Q) Write a java program to perform sum of two binary numbers?

input:
	1010
	0101
output:
	1111

ex:
---
import java.util.Scanner;
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first binary :");
		String binary1=sc.next();//1010

		System.out.println("Enter the second binary :");
		String binary2=sc.next();//0101

		//convert binary to decimal 
		int a=Integer.parseInt(binary1,2);
		int b=Integer.parseInt(binary2,2);

		int c=a+b;

		//convert decimal to binary 
		String result=Integer.toBinaryString(c);
		System.out.println(result);
	}
}






























