java.util package
==================
Q) What is the difference between Arrays and Collections?

Arrays						Collections
--------					------------
It is a collection of homogeneous data 		It is a collection of homogeneous and hetrogeneous 
elements.					data elements.

Arrays are fixed in size.			Collections are growable in nature.

Performance point of view arrays are 		Memory point of view Collections are recommanded 
recommanded to use.				to use.

Arrays not implemented based on data structure	Collections are implemented based on data structure 
concept.Hence we can't expect any ready made 	concept.Hence we can expect ready made methods.
methods.

Arrays can hold primitive types and		Collections can hold only object types. 
object types.


Collection Framework
=====================
Collection framework defines several classes and interfaces to represent group of objects in a single unit.


Collection
============
Collection is an interface which is present in java.util package.

Collection is a root interface for entire Collection framework.

If we want to represent group of individual objects in a single unit then we need to use Collections.

Collection interface contains following methods which are available for entire Collection objects.

ex:
	cmd> javap    java.util.Collection 


	public abstract int size();
  	public abstract boolean isEmpty();
  	public abstract boolean contains(java.lang.Object);
  	public abstract java.util.Iterator<E> iterator();
  	public abstract java.lang.Object[] toArray();
  	public abstract <T> T[] toArray(T[]);
  	public default <T> T[] toArray(java.util.function.IntFunction<T[]>);
  	public abstract boolean add(E);
  	public abstract boolean remove(java.lang.Object);
  	public abstract boolean containsAll(java.util.Collection<?>);
  	public abstract boolean addAll(java.util.Collection<? extends E>);
  	public abstract boolean removeAll(java.util.Collection<?>);
  	public default boolean removeIf(java.util.function.Predicate<? super E>);
  	public abstract boolean retainAll(java.util.Collection<?>);
  	public abstract void clear();
  	public abstract boolean equals(java.lang.Object);
  	public abstract int hashCode();
	and etc.

List
=====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicates are allowed 
and order is preserved then we need to use List interface.

Diagram: class33.1


ArrayList 
========
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

ArrayList is best for storing and retrieving the elements.

ex:
----

import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		
		al.add(10);
		System.out.println(al); //[one,two,three,one,10]
		
		al.add(null);
		System.out.println(al); // [one,two,three,one,10,null]
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		al.remove("two");
		System.out.println(al);//[one,three]
		
		System.out.println(al.contains("two")); //false
		
		al.clear();
		System.out.println(al); // []
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		System.out.println(al.isEmpty());//false
		
		for(int i=0;i<al.size();i++)
		{
			System.out.print(al.get(i)+" ");
		}
		
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		List<String> l=new ArrayList<String>();
		l.add("one");
		l.add("two");
		l.add("three");
		System.out.println(l);//[one,two,three]
		
		
	}
}

LinkedList 
------------
The underlying data structure is doubly linkedlist.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

LinkedList is best for manipulating the elements.

LinkedList contains following methods.

ex:
	public E getFirst();
  	public E getLast();
  	public E removeFirst();
  	public E removeLast();
  	public void addFirst(E);
  	public void addLast(E);
	and etc.

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList ll = new LinkedList();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]
		
		ll.add("one");
		System.out.println(ll);//[one,two,three,one]
		
		ll.add(10);
		System.out.println(ll);//[one,two,three,one,10]
		
		ll.add(null);
		System.out.println(ll); //[one,two,three,one,10,null]
		
		
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll = new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]
		
		ll.add("one");
		System.out.println(ll);//[one,two,three,one]
		
		ll.add(null);
		System.out.println(ll); //[one,two,three,one,10,null]
		
		
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll = new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]
		
		ll.addFirst("gogo");
		ll.addLast("jojo");
		System.out.println(ll);//[gogo,one,two,three,jojo]
		
		System.out.println(ll.getFirst());//gogo
		System.out.println(ll.getLast());//jojo
		
		ll.removeFirst();
		ll.removeLast();
		System.out.println(ll);//[one,two,three]
		
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{	
		LinkedList<String> ll1=new LinkedList<String>();
		ll1.add("one");
		ll1.add("two");
		ll1.add("three");
		System.out.println(ll1);//[one,two,three]
		
		LinkedList<String> ll2=new LinkedList<String>();
		ll2.add("raja");
		System.out.println(ll2);//[raja]
		
		ll2.addAll(ll1);
		System.out.println(ll2);//[raja,one,two,three]
		
		System.out.println(ll2.containsAll(ll1));//true
		
		ll2.removeAll(ll1);
		System.out.println(ll2);//[raja]
	}
}



Vector
======
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

All the methods present in Vector are synchronized.Hence we can achieve thread safety.

A Vector class contains following methods.

ex:
	addElement()
	removeElementAt()
	removeAllElements()
	firstElement()
	lastElement()
	and etc.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Vector<Integer> v=new Vector<Integer>();
		System.out.println(v.capacity());//10
		
		for(int i=1;i<=10;i++)
		{
			v.addElement(i);
		}
		
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]
		
		System.out.println(v.firstElement());//1
		System.out.println(v.lastElement());//10
		
		v.removeElementAt(5);
		System.out.println(v);//[1,2,3,4,5,7,8,9,10]
		
		v.removeAllElements();
		System.out.println(v); //[]
		
	}
}

Stack
======
It is a child class of Vector class.

If we depend upon Last In First Out order then we need to use stack.

constructor
--------
	Stack s = new Stack();

Methods
------

1) push(E)
----------
	It is used to push the element into a stack.

2) pop()
--------
	It is used to pop the element from stack.

3) peek()
-------
	It returns toppest element from stack.

4) isEmpty()
----------
	It is used to check stack is empty or not.

5) search(Object o)
-------------------
	It returns offset value if element found otherwiser we will get -1.


ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{	
		Stack<String> s=new Stack<String>();
		s.push("A");
		s.push("B");
		s.push("C");
		System.out.println(s); //[A,B,C]
		
		s.pop();
		System.out.println(s); //[A,B]
		
		System.out.println(s.peek());//B
		
		System.out.println(s.isEmpty());//false 
		
		System.out.println(s.search("Z"));//-1
		
		System.out.println(s.search("A"));//2
	}
}




























































