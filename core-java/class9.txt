Typecasting in Java
===================
The process of converting from one datatype to another datatype is called typecasting.

In java, typecasting can be performed in two ways.

1) Implicit typecasting 

2) Explicit typecasting 

1) Implicit typecasting 
-----------------------
If want to store small value into a bigger variable then we need to use implicit typecasting.

A compiler is responsible to perform implicit typecasting.

There is no possibility to loss the information.

It is also known as widening or upcasting.

We can perform implicit typecasting as follow.

ex:
	byte	-->	short
				-->
					int  --> long --> float --> double
				-->
			char

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		byte b=10;
		
		int i=b;
		
		System.out.println(i); // 10
	}
}

ex:
--
class Test 
{
	public static void main(String[] args) 
	{
		char ch='a';
		
		int i=ch;
		
		System.out.println(i); // 97
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;
		
		float f=i;
		
		System.out.println(f); // 10.0
	}
}

2) Explicit typecasting
-----------------------
If want to store bigger value into a smaller variable then we need to use explicit typecasting.

A programmer is responsible to perform explicit typecasting.

There is a possibility to loss the information.

It is also known as Narrowing or Downcasting.

We can perform explicit typecasting as follow.

ex:
	byte	<--	short
				<--
					int  <-- long <-- float <-- double
				<--
			char

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		float f=10.5f;
		
		int i=(int)f;
		
		System.out.println(i); // 10
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=65;
		
		char ch=(char)i;
		
		System.out.println(ch); // A 
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=65;
		
		byte b=(byte)i;
		
		System.out.println(b); //65 
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=128;
		
		byte b=(byte)i;
		
		System.out.println(b); //-128
	}
}




Blocks in Java
==============
A block is a set of statement which is enclosed in a curly braces.

In java we have three types of blocks.

1) Instance block 

2) Static block 

3) Local block 

1) Instance block 
-----------------
Instance block is used to initialize the instance variables.

Instance block must and should declare immediately after the class but not inside methods and constructors.

Instance block will execute when we create an object.

syntax:
-------
	//instance block 
	{
		-
		- //code to be execute 
		-
	}

ex:
---
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}
	
	public static void main(String[] args) 
	{
		System.out.println("main-method");
	}
}
o/p:
	main-method 

ex:
---
class Test 
{
	//instance block
	{
		System.out.println("instance-block");
	}
	
	public static void main(String[] args) 
	{
		System.out.println("main-method");
		Test t=new Test();
	}
}
o/p:

main-method
instance-block

ex:
---
class Test 
{
	//instance variable 
	int i;
	
	//instance block
	{
		i=100;
	}
	
	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println(t.i); // 100
	}
}

2) Static block
---------------
Static block is used to initialize the static variables.

Static block must and should declare immediately after the class using static keyword but not inside methods and constructors.

Static block will execute at the time of classloading.

syntax:
-----
	// static block
	static
	{
		-
		- //code to be execute 
		-
	}

ex:
---
class Test 
{
	//static block
	static
	{
		System.out.println("static-block");
	}
	
	public static void main(String[] args) 
	{
		System.out.println("main-method"); 
	}
}
o/p:
	static-block
	main-method

ex:
---
class Test 
{
	//static variable
	static int i;
	
	
	//static block
	static
	{
		i=200;
	}
	
	public static void main(String[] args) 
	{
		System.out.println(i);  //200
	}
}


3) Local block 
------------
Local block is used to initialize the local variables.

Local block must declare inside methods and contructors.

Local block will execute just like normal statement.

syntax:
	//local block 
	{
		-
		- //set of statement 
		-
	}

ex:
---
class Test 
{
	
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		
		//local block
		{
			System.out.println("stmt2");
		}
		
		System.out.println("stmt3");
	}
}
o/p:
	stmt1
	stmt2
	stmt3

ex:
---
class Test 
{
	
	public static void main(String[] args) 
	{
		//local variable 
		int i;
		
		//local block
		{
			i=300;
		}
		
		System.out.println(i); //300
	}
}


Operators
==========
Operator is a symbol which is used to perform some operations on operands.

ex:
	c = a + b;

	Here = and + are operators.
	Here a,b and c are operands.

We have following list of operators in java.

1) Assignment operators 

2) Conditional / Ternary operators 

3) Logical operators 

4) Bitwise operators 

5) Arithmetic operators

6) Relational operators 

7) Shift operators 

8) Unary operators  


1) Assignment operators 
-----------------------
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i=20;
		
		i=30;
		
		System.out.println(i); // 30
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		final int i=10;
		
		i=20;
		
		i=30;
		
		System.out.println(i); // C.T.E 
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i+=2; // i = i + 2 ;
		
		System.out.println(i); //12
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i-=20; // i = i - 20 ;
		
		System.out.println(i); //-10
	}
}


ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i*=5; // i = i * 5 ;
		
		System.out.println(i); //50
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i/=5; // i = i / 5 ;
		
		System.out.println(i); //2
	}
}


ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i%=5; // i = i % 5 ;
		
		System.out.println(i); //0
	}
}


2) Conditional / Ternary operators 
------------------------------
syntax:
-----
	(condition)?value1:value2;

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		boolean b=(5>2)?true:false;
		System.out.println(b); // true 
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		int i=(5>20)?1:0;
		System.out.println(i); // 0
	}
}

ex:
---
class Test 
{
	public static void main(String[] args) 
	{
		String s=(5>2)?"Hi":"Bye";
		System.out.println(s); // Hi
	}
}

Q) Write a java program to find out greatest of two numbers?

import java.util.Scanner;
class Test 
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a=sc.nextInt(); // 5
		
		System.out.println("Enter the second number :");
		int b=sc.nextInt(); // 10 
		
		int max=(a>b)?a:b;
		System.out.println(max+" is greatest");
	}
}


Q) Write a java program to perform greatest of three numbers?

import java.util.Scanner;
class Test 
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a=sc.nextInt(); // 5
		
		System.out.println("Enter the second number :");
		int b=sc.nextInt(); // 10 
		
		System.out.println("Enter the third number :");
		int c=sc.nextInt(); // 6
		
		int max= (a>b)?((a>c)?a:c):((b>c)?b:c);
		
		
		System.out.println(max+" is greatest");
	}
}













































