throw
======
Sometimes we will create exception object explicitly and handover to JVM manually by using 
throw statement.

ex:
	throw  new  ArithmeticException("Don't divide by zero");

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10/0);
	}
}
Here exception object is created and handover to JVM by main method.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		throw new ArithmeticException("Don't divide by zero");
	}
}

Here exception object is created and handover to JVM by throw keyword.

throws statement
================
If any checked exception raised in our program we must and should handle that exception by using
try and catch block or by using throws statement.

Ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			Thread.sleep(3000);
			System.out.println("Welcome to Java");
		}
		catch (InterruptedException ie)
		{
			ie.printStackTrace();
		}
		
	}
}

Ex:
---
class Test  
{
	public static void main(String[] args)throws InterruptedException  
	{
			Thread.sleep(5000);
			System.out.println("Welcome to Java");
	}
}

2) Userdefined exceptions
=========================
Exceptions which are created by the user based on the application requirements are called 
userdefined exceptions or custom exceptions.

ex:
	ACNotWorkingException
	NoDataFoundException 
	NoFundException
	EligibleException
	NotEligibleException
	and etc.

ex:
---
import java.util.Scanner;

class EligibleException extends RuntimeException
{
	EligibleException(String s)
	{
		super(s);
	}
}
class NotEligibleException extends RuntimeException 
{
	NotEligibleException(String s)
	{
		super(s);
	}
}
class Test
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the age :");
		int age=sc.nextInt();
		
		if(age<18)
			throw new NotEligibleException("U r not eligible");
		else
			throw new EligibleException("U r eligible ");
	}
}


Q) What is the difference between final, finally and finalize method?

final
------
final is a modifier which is applicable for variables, methods and classes.
If we declare any variable as final then reassignment of that variable is not possible.
If we declare any method as final then overriding of that method is not possible.
If we declare any class as final then creating child class is not possible.

finally
--------
It is a block which contains cleanup code.It will execute irrespective of exception raised or not.

finalize
--------
It is a method called by garbage collector just before destroying an object for cleanup activity.


Q) What is garbage collector?

Garbage collector is a daemon thread which is used to destroy unused or useless objects from java.

There are two ways to call garbage collector.

1) System.gc() 

2) Runtime.getRuntime().gc() 

ex:
---

class Test
{
	int i=10;
	
	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.i);
		
		t=null;
		
		System.gc();
	}
	public void finalize()
	{
		System.out.println("finalized method");
	}
}

ex:
---

class Test
{
	int i=10;
	
	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.i);
		
		t=null;
		
		Runtime.getRuntime().gc();
	}
	public void finalize()
	{
		System.out.println("finalized method");
	}
}

























